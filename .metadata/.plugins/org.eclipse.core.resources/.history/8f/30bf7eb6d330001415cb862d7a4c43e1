package com.deco.service;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Observable;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import com.deco.model.TeamModel;
import com.deco.sql.TEAM;
import android.content.Context;
import android.os.AsyncTask;

public class TeamImgService extends Observable{
	private static Context _context;
	
	public TeamImgService(Context context) {
		if (context != null)
			_context = context;
	}
	
	public void getImageFromId(String szTeamID){
		new RequestTask().execute(szTeamID);
	}
	
	class RequestTask extends AsyncTask<String, String, HashMap<String, String>>{
	    @Override
	    protected HashMap<String, String> doInBackground(String... params) {
	    	HashMap<String, String> ret = new HashMap<String, String>();
	    	String szTeamID = params[0];
	    	String szFilePath = "team" + szTeamID + ".png";
	    	ret.put("teamid", szTeamID);
	    	
	    	File file = _context.getFileStreamPath(szFilePath);
	    	if(file.exists()){
		        ret.put("result", "true");
		        return ret;	    		
	    	} 	
	    	
	        HttpClient httpclient = new DefaultHttpClient();
	        HttpResponse response;
	        String responseString = null;
	        TeamModel mdlTeam = new TeamModel(_context);
	        ArrayList<String> lsSelect = new ArrayList<String>();
	        lsSelect.add(TEAM.avatar);
	        HashMap<String, String> pTeamInfo = mdlTeam.getTeamById(szTeamID, lsSelect);
	        String szAvatarUrl = pTeamInfo.get(TEAM.avatar); 
	        if (szAvatarUrl == ""){
	        	ret.put("result", "false");
	        	return ret;
	        }
	        
	        try {
	            URL url = new URL(szAvatarUrl);
	            HttpURLConnection connection = (HttpURLConnection) url
	                    .openConnection();
	            connection.setDoInput(true);
	            connection.connect();
	            InputStream input = connection.getInputStream();
	            Bitmap myBitmap = BitmapFactory.decodeStream(input);

	            return myBitmap;

	        } catch (IOException e) {
	            e.printStackTrace();
	            Log.e("getBmpFromUrl error: ", e.getMessage().toString());
	            return null;
	        }
	        
	        
	        try {
		        FileOutputStream fos = _context.openFileOutput(szFilePath, _context.MODE_WORLD_READABLE);
		        fos.write(responseString.getBytes());
		        fos.close(); 
	        } catch (Exception e) {
	        	e.printStackTrace();
	        	ret.put("result", "false");
	        	return ret;
	        }
	        
	        ret.put("result", "true");
	        return ret;
	    }
   
	    
	    @Override
	    protected void onPostExecute(HashMap<String, String> result) {
	        super.onPostExecute(result);
			setChanged();
			notifyObservers(result);	        
	    }	   
	}
}
